{"swagger":"2.0","info":{"description":"Sample API with NestJS","version":"0.1","title":"Sample API"},"basePath":"/v1/api","tags":[],"schemes":["http"],"securityDefinitions":{"bearer":{"type":"apiKey","name":"Authorization","in":"header"}},"paths":{"/users":{"get":{"summary":"Retrieve many User","parameters":[{"name":"fields","description":"<h4>Selects fields that should be returned in the reponse body.</h4><i>Syntax:</i> <strong>?fields=field1,field2,...</strong> <br/><i>Example:</i> <strong>?fields=email,name</strong>","required":false,"in":"query","type":"string"},{"name":"filter","description":"<h4>Adds fields request condition (multiple conditions) to the request.</h4><i>Syntax:</i> <strong>?filter=field||condition||value</strong><br/><i>Examples:</i> <ul><li><strong>?filter=name||eq||batman</strong></li><li><strong>?filter=isVillain||eq||false&filter=city||eq||Arkham</strong> (multiple filters are treated as a combination of AND type of conditions)</li><li><strong>?filter=shots||in||12,26</strong> (some conditions accept multiple values separated by commas)</li><li><strong>?filter=power||isnull</strong> (some conditions don't accept value)</li></ul><br/>Filter Conditions:<ul><li><strong><code>eq</code></strong> (<code>=</code>, equal)</li><li><strong><code>ne</code></strong> (<code>!=</code>, not equal)</li><li><strong><code>gt</code></strong> (<code>&gt;</code>, greater than)</li><li><strong><code>lt</code></strong> (<code>&lt;</code>, lower that)</li><li><strong><code>gte</code></strong> (<code>&gt;=</code>, greater than or equal)</li><li><strong><code>lte</code></strong> (<code>&lt;=</code>, lower than or equal)</li><li><strong><code>starts</code></strong> (<code>LIKE val%</code>, starts with)</li><li><strong><code>ends</code></strong> (<code>LIKE %val</code>, ends with)</li><li><strong><code>cont</code></strong> (<code>LIKE %val%</code>, contains)</li><li><strong><code>excl</code></strong> (<code>NOT LIKE %val%</code>, not contains)</li><li><strong><code>in</code></strong> (<code>IN</code>, in range, <strong><em>accepts multiple values</em></strong>)</li><li><strong><code>notin</code></strong> (<code>NOT IN</code>, not in range, <strong><em>accepts multiple values</em></strong>)</li><li><strong><code>isnull</code></strong> (<code>IS NULL</code>, is NULL, <strong><em>doesn't accept value</em></strong>)</li><li><strong><code>notnull</code></strong> (<code>IS NOT NULL</code>, not NULL, <strong><em>doesn't accept value</em></strong>)</li><li><strong><code>between</code></strong> (<code>BETWEEN</code>, between, <strong><em>accepts two values</em></strong>)</li></ul>","required":false,"in":"query","type":"string"},{"name":"or","description":"<h4>Adds <code>OR</code> conditions to the request.</h4><i>Syntax:</i> <strong>?or=field||condition||value</strong><br/>It uses the same conditions as the filter parameter<br/><i>Rules and <i>Examples:</i></i><ul><li>If there is only <strong>one</strong> <code>or</code> present (without <code>filter</code>) then it will be interpreted as simple filter:</li><ul><li><strong>?or=name||eq||batman</strong></li></ul></ul><ul><li>If there are <strong>multiple</strong> <code>or</code> present (without <code>filter</code>) then it will be interpreted as a compination of <code>OR</code> conditions, as follows:<br><code>WHERE {or} OR {or} OR ...</code></li><ul><li><strong>?or=name||eq||batman&or=name||eq||joker</strong></li></ul></ul><ul><li>If there are <strong>one</strong> <code>or</code> and <strong>one</strong> <code>filter</code> then it will be interpreted as <code>OR</code> condition, as follows:<br><code>WHERE {filter} OR {or}</code></li><ul><li><strong>?filter=name||eq||batman&or=name||eq||joker</strong></li></ul></ul><ul><li>If present <strong>both</strong> <code>or</code> and <code>filter</code> in any amount (<strong>one</strong> or <strong>miltiple</strong> each) then both interpreted as a combitation of <code>AND</code> conditions and compared with each other by <code>OR</code> condition, as follows:<br><code>WHERE ({filter} AND {filter} AND ...) OR ({or} AND {or} AND ...)</code></li><ul><li><strong>?filter=type||eq||hero&filter=status||eq||alive&or=type||eq||villain&or=status||eq||dead</strong></li></ul></ul>","required":false,"in":"query","type":"string"},{"name":"sort","description":"<h4>Adds sort by field (by multiple fields) and order to query result.</h4><i>Syntax:</i> <strong>?sort=field,ASC|DESC</strong><br/><i>Examples:</i></i><ul><li><strong>?sort=name,ASC</strong></li><li><strong>?sort=name,ASC&sort=id,DESC</strong></li></ul>","required":false,"in":"query","type":"string"},{"name":"join","description":"<h4>Receive joined relational objects in GET result (with all or selected fields).</h4><i>Syntax:</i><ul><li><strong>?join=relation</strong></li><li><strong>?join=relation||field1,field2,...</strong></li><li><strong>?join=relation1||field11,field12,...&join=relation1.nested||field21,field22,...&join=...</strong></li></ul><br/><i>Examples:</i></i><ul><li><strong>?join=profile</strong></li><li><strong>?join=profile||firstName,email</strong></li><li><strong>?join=profile||firstName,email&join=notifications||content&join=tasks</strong></li><li><strong>?join=relation1&join=relation1.nested&join=relation1.nested.deepnested</strong></li></ul><strong><i>Notice:</i></strong> <code>id</code> field always persists in relational objects. To use nested relations, the parent level MUST be set before the child level like example above.","required":false,"in":"query","type":"string"},{"name":"per_page","description":"<h4>Receive <code>N</code> amount of entities.</h4><i>Syntax:</i> <strong>?per_page=number</strong><br/><i>Example:</i> <strong>?per_page=10</strong>","required":false,"in":"query","type":"number"},{"name":"offset","description":"<h4>Offset <code>N</code> amount of entities.</h4><i>Syntax:</i> <strong>?offset=number</strong><br/><i>Example:</i> <strong>?offset=10</strong>","required":false,"in":"query","type":"number"},{"name":"page","description":"<h4>Receive a portion of <code>limit</code> entities (alternative to <code>offset</code>). Will be applied if <code>limit</code> is set up.</h4><i>Syntax:</i> <strong>?page=number</strong><br/><i>Example:</i> <strong>?page=2</strong>","required":false,"in":"query","type":"number"},{"name":"cache","description":"<h4>Reset cache (if was enabled) and receive entities from the DB.</h4><i>Usage:</i> <strong>?cache=0</strong>","required":false,"in":"query","type":"number"}],"responses":{"200":{"description":"","schema":{"type":"array","items":{"$ref":"#/definitions/User"}}}},"tags":["users"],"security":[{"bearer":[]}],"produces":["application/json"],"consumes":["application/json"]},"post":{"summary":"Create one User","parameters":[{"name":"User","required":true,"in":"body","schema":{"$ref":"#/definitions/User"}}],"responses":{"201":{"description":"","schema":{"$ref":"#/definitions/User"}}},"tags":["users"],"security":[{"bearer":[]}],"produces":["application/json"],"consumes":["application/json"]}},"/users/{id}":{"get":{"summary":"Retrieve one User","parameters":[{"name":"id","required":true,"in":"path","type":"number"},{"name":"fields","description":"<h4>Selects fields that should be returned in the reponse body.</h4><i>Syntax:</i> <strong>?fields=field1,field2,...</strong> <br/><i>Example:</i> <strong>?fields=email,name</strong>","required":false,"in":"query","type":"string"},{"name":"join","description":"<h4>Receive joined relational objects in GET result (with all or selected fields).</h4><i>Syntax:</i><ul><li><strong>?join=relation</strong></li><li><strong>?join=relation||field1,field2,...</strong></li><li><strong>?join=relation1||field11,field12,...&join=relation1.nested||field21,field22,...&join=...</strong></li></ul><br/><i>Examples:</i></i><ul><li><strong>?join=profile</strong></li><li><strong>?join=profile||firstName,email</strong></li><li><strong>?join=profile||firstName,email&join=notifications||content&join=tasks</strong></li><li><strong>?join=relation1&join=relation1.nested&join=relation1.nested.deepnested</strong></li></ul><strong><i>Notice:</i></strong> <code>id</code> field always persists in relational objects. To use nested relations, the parent level MUST be set before the child level like example above.","required":false,"in":"query","type":"string"},{"name":"cache","description":"<h4>Reset cache (if was enabled) and receive entities from the DB.</h4><i>Usage:</i> <strong>?cache=0</strong>","required":false,"in":"query","type":"number"}],"responses":{"200":{"description":"","schema":{"$ref":"#/definitions/User"}}},"tags":["users"],"security":[{"bearer":[]}],"produces":["application/json"],"consumes":["application/json"]},"patch":{"summary":"Update one User","parameters":[{"name":"User","required":true,"in":"body","schema":{"$ref":"#/definitions/User"}},{"name":"id","required":true,"in":"path","type":"number"}],"responses":{"200":{"description":"","schema":{"$ref":"#/definitions/User"}}},"tags":["users"],"security":[{"bearer":[]}],"produces":["application/json"],"consumes":["application/json"]},"put":{"summary":"Replace one User","parameters":[{"name":"User","required":true,"in":"body","schema":{"$ref":"#/definitions/User"}},{"name":"id","required":true,"in":"path","type":"number"}],"responses":{"200":{"description":"","schema":{"$ref":"#/definitions/User"}}},"tags":["users"],"security":[{"bearer":[]}],"produces":["application/json"],"consumes":["application/json"]},"delete":{"summary":"Delete one User","parameters":[{"name":"id","required":true,"in":"path","type":"number"}],"responses":{"200":{"description":"","schema":{"$ref":"#/definitions/User"}}},"tags":["users"],"security":[{"bearer":[]}],"produces":["application/json"],"consumes":["application/json"]}},"/users/bulk":{"post":{"summary":"Create many User","parameters":[{"name":"GeneratedUserBulkDto","required":true,"in":"body","schema":{"$ref":"#/definitions/GeneratedUserBulkDto"}}],"responses":{"201":{"description":"","schema":{"type":"array","items":{"$ref":"#/definitions/User"}}}},"tags":["users"],"security":[{"bearer":[]}],"produces":["application/json"],"consumes":["application/json"]}},"/auth/login":{"post":{"parameters":[{"name":"LoginDto","required":true,"in":"body","schema":{"$ref":"#/definitions/LoginDto"}}],"responses":{"201":{"description":""}},"tags":["auth"],"produces":["application/json"],"consumes":["application/json"]}},"/roles":{"get":{"summary":"Retrieve many Role","parameters":[{"name":"fields","description":"<h4>Selects fields that should be returned in the reponse body.</h4><i>Syntax:</i> <strong>?fields=field1,field2,...</strong> <br/><i>Example:</i> <strong>?fields=email,name</strong>","required":false,"in":"query","type":"string"},{"name":"filter","description":"<h4>Adds fields request condition (multiple conditions) to the request.</h4><i>Syntax:</i> <strong>?filter=field||condition||value</strong><br/><i>Examples:</i> <ul><li><strong>?filter=name||eq||batman</strong></li><li><strong>?filter=isVillain||eq||false&filter=city||eq||Arkham</strong> (multiple filters are treated as a combination of AND type of conditions)</li><li><strong>?filter=shots||in||12,26</strong> (some conditions accept multiple values separated by commas)</li><li><strong>?filter=power||isnull</strong> (some conditions don't accept value)</li></ul><br/>Filter Conditions:<ul><li><strong><code>eq</code></strong> (<code>=</code>, equal)</li><li><strong><code>ne</code></strong> (<code>!=</code>, not equal)</li><li><strong><code>gt</code></strong> (<code>&gt;</code>, greater than)</li><li><strong><code>lt</code></strong> (<code>&lt;</code>, lower that)</li><li><strong><code>gte</code></strong> (<code>&gt;=</code>, greater than or equal)</li><li><strong><code>lte</code></strong> (<code>&lt;=</code>, lower than or equal)</li><li><strong><code>starts</code></strong> (<code>LIKE val%</code>, starts with)</li><li><strong><code>ends</code></strong> (<code>LIKE %val</code>, ends with)</li><li><strong><code>cont</code></strong> (<code>LIKE %val%</code>, contains)</li><li><strong><code>excl</code></strong> (<code>NOT LIKE %val%</code>, not contains)</li><li><strong><code>in</code></strong> (<code>IN</code>, in range, <strong><em>accepts multiple values</em></strong>)</li><li><strong><code>notin</code></strong> (<code>NOT IN</code>, not in range, <strong><em>accepts multiple values</em></strong>)</li><li><strong><code>isnull</code></strong> (<code>IS NULL</code>, is NULL, <strong><em>doesn't accept value</em></strong>)</li><li><strong><code>notnull</code></strong> (<code>IS NOT NULL</code>, not NULL, <strong><em>doesn't accept value</em></strong>)</li><li><strong><code>between</code></strong> (<code>BETWEEN</code>, between, <strong><em>accepts two values</em></strong>)</li></ul>","required":false,"in":"query","type":"string"},{"name":"or","description":"<h4>Adds <code>OR</code> conditions to the request.</h4><i>Syntax:</i> <strong>?or=field||condition||value</strong><br/>It uses the same conditions as the filter parameter<br/><i>Rules and <i>Examples:</i></i><ul><li>If there is only <strong>one</strong> <code>or</code> present (without <code>filter</code>) then it will be interpreted as simple filter:</li><ul><li><strong>?or=name||eq||batman</strong></li></ul></ul><ul><li>If there are <strong>multiple</strong> <code>or</code> present (without <code>filter</code>) then it will be interpreted as a compination of <code>OR</code> conditions, as follows:<br><code>WHERE {or} OR {or} OR ...</code></li><ul><li><strong>?or=name||eq||batman&or=name||eq||joker</strong></li></ul></ul><ul><li>If there are <strong>one</strong> <code>or</code> and <strong>one</strong> <code>filter</code> then it will be interpreted as <code>OR</code> condition, as follows:<br><code>WHERE {filter} OR {or}</code></li><ul><li><strong>?filter=name||eq||batman&or=name||eq||joker</strong></li></ul></ul><ul><li>If present <strong>both</strong> <code>or</code> and <code>filter</code> in any amount (<strong>one</strong> or <strong>miltiple</strong> each) then both interpreted as a combitation of <code>AND</code> conditions and compared with each other by <code>OR</code> condition, as follows:<br><code>WHERE ({filter} AND {filter} AND ...) OR ({or} AND {or} AND ...)</code></li><ul><li><strong>?filter=type||eq||hero&filter=status||eq||alive&or=type||eq||villain&or=status||eq||dead</strong></li></ul></ul>","required":false,"in":"query","type":"string"},{"name":"sort","description":"<h4>Adds sort by field (by multiple fields) and order to query result.</h4><i>Syntax:</i> <strong>?sort=field,ASC|DESC</strong><br/><i>Examples:</i></i><ul><li><strong>?sort=name,ASC</strong></li><li><strong>?sort=name,ASC&sort=id,DESC</strong></li></ul>","required":false,"in":"query","type":"string"},{"name":"join","description":"<h4>Receive joined relational objects in GET result (with all or selected fields).</h4><i>Syntax:</i><ul><li><strong>?join=relation</strong></li><li><strong>?join=relation||field1,field2,...</strong></li><li><strong>?join=relation1||field11,field12,...&join=relation1.nested||field21,field22,...&join=...</strong></li></ul><br/><i>Examples:</i></i><ul><li><strong>?join=profile</strong></li><li><strong>?join=profile||firstName,email</strong></li><li><strong>?join=profile||firstName,email&join=notifications||content&join=tasks</strong></li><li><strong>?join=relation1&join=relation1.nested&join=relation1.nested.deepnested</strong></li></ul><strong><i>Notice:</i></strong> <code>id</code> field always persists in relational objects. To use nested relations, the parent level MUST be set before the child level like example above.","required":false,"in":"query","type":"string"},{"name":"per_page","description":"<h4>Receive <code>N</code> amount of entities.</h4><i>Syntax:</i> <strong>?per_page=number</strong><br/><i>Example:</i> <strong>?per_page=10</strong>","required":false,"in":"query","type":"number"},{"name":"offset","description":"<h4>Offset <code>N</code> amount of entities.</h4><i>Syntax:</i> <strong>?offset=number</strong><br/><i>Example:</i> <strong>?offset=10</strong>","required":false,"in":"query","type":"number"},{"name":"page","description":"<h4>Receive a portion of <code>limit</code> entities (alternative to <code>offset</code>). Will be applied if <code>limit</code> is set up.</h4><i>Syntax:</i> <strong>?page=number</strong><br/><i>Example:</i> <strong>?page=2</strong>","required":false,"in":"query","type":"number"},{"name":"cache","description":"<h4>Reset cache (if was enabled) and receive entities from the DB.</h4><i>Usage:</i> <strong>?cache=0</strong>","required":false,"in":"query","type":"number"}],"responses":{"200":{"description":"","schema":{"type":"array","items":{"$ref":"#/definitions/Role"}}}},"tags":["roles"],"security":[{"bearer":[]}],"produces":["application/json"],"consumes":["application/json"]},"post":{"summary":"Create one Role","parameters":[{"name":"Role","required":true,"in":"body","schema":{"$ref":"#/definitions/Role"}}],"responses":{"201":{"description":"","schema":{"$ref":"#/definitions/Role"}}},"tags":["roles"],"security":[{"bearer":[]}],"produces":["application/json"],"consumes":["application/json"]}},"/roles/{id}":{"get":{"summary":"Retrieve one Role","parameters":[{"name":"id","required":true,"in":"path","type":"number"},{"name":"fields","description":"<h4>Selects fields that should be returned in the reponse body.</h4><i>Syntax:</i> <strong>?fields=field1,field2,...</strong> <br/><i>Example:</i> <strong>?fields=email,name</strong>","required":false,"in":"query","type":"string"},{"name":"join","description":"<h4>Receive joined relational objects in GET result (with all or selected fields).</h4><i>Syntax:</i><ul><li><strong>?join=relation</strong></li><li><strong>?join=relation||field1,field2,...</strong></li><li><strong>?join=relation1||field11,field12,...&join=relation1.nested||field21,field22,...&join=...</strong></li></ul><br/><i>Examples:</i></i><ul><li><strong>?join=profile</strong></li><li><strong>?join=profile||firstName,email</strong></li><li><strong>?join=profile||firstName,email&join=notifications||content&join=tasks</strong></li><li><strong>?join=relation1&join=relation1.nested&join=relation1.nested.deepnested</strong></li></ul><strong><i>Notice:</i></strong> <code>id</code> field always persists in relational objects. To use nested relations, the parent level MUST be set before the child level like example above.","required":false,"in":"query","type":"string"},{"name":"cache","description":"<h4>Reset cache (if was enabled) and receive entities from the DB.</h4><i>Usage:</i> <strong>?cache=0</strong>","required":false,"in":"query","type":"number"}],"responses":{"200":{"description":"","schema":{"$ref":"#/definitions/Role"}}},"tags":["roles"],"security":[{"bearer":[]}],"produces":["application/json"],"consumes":["application/json"]},"patch":{"summary":"Update one Role","parameters":[{"name":"Role","required":true,"in":"body","schema":{"$ref":"#/definitions/Role"}},{"name":"id","required":true,"in":"path","type":"number"}],"responses":{"200":{"description":"","schema":{"$ref":"#/definitions/Role"}}},"tags":["roles"],"security":[{"bearer":[]}],"produces":["application/json"],"consumes":["application/json"]},"put":{"summary":"Replace one Role","parameters":[{"name":"Role","required":true,"in":"body","schema":{"$ref":"#/definitions/Role"}},{"name":"id","required":true,"in":"path","type":"number"}],"responses":{"200":{"description":"","schema":{"$ref":"#/definitions/Role"}}},"tags":["roles"],"security":[{"bearer":[]}],"produces":["application/json"],"consumes":["application/json"]},"delete":{"summary":"Delete one Role","parameters":[{"name":"id","required":true,"in":"path","type":"number"}],"responses":{"200":{"description":"","schema":{"$ref":"#/definitions/Role"}}},"tags":["roles"],"security":[{"bearer":[]}],"produces":["application/json"],"consumes":["application/json"]}},"/roles/bulk":{"post":{"summary":"Create many Role","parameters":[{"name":"GeneratedRoleBulkDto","required":true,"in":"body","schema":{"$ref":"#/definitions/GeneratedRoleBulkDto"}}],"responses":{"201":{"description":"","schema":{"type":"array","items":{"$ref":"#/definitions/Role"}}}},"tags":["roles"],"security":[{"bearer":[]}],"produces":["application/json"],"consumes":["application/json"]}}},"definitions":{"User":{"type":"object","properties":{}},"GeneratedUserBulkDto":{"type":"object","properties":{"bulk":{"type":"array","items":{"$ref":"#/definitions/User"}}},"required":["bulk"]},"LoginDto":{"type":"object","properties":{}},"Role":{"type":"object","properties":{}},"GeneratedRoleBulkDto":{"type":"object","properties":{"bulk":{"type":"array","items":{"$ref":"#/definitions/Role"}}},"required":["bulk"]}}}